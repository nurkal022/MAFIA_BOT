import logging
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, BotCommand
from sqlalchemy.orm import Session
from app.database.db import get_db
from app.database.models import User
import app.keyboards as kb
from aiogram.filters import Command
import asyncio
import random
from aiogram.types import InputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

router = Router()
players = []
game_status = "stopped" 
votes_count = 0
votes_event = asyncio.Event()
day_count = 1 

role_descriptions = {
    'role_civilian': '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å: –û–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞, –Ω–µ –æ–±–ª–∞–¥–∞—é—â–∏–π –æ—Å–æ–±—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏.',
    'role_don': '–î–æ–Ω: –ì–ª–∞–≤–∞ –º–∞—Ñ–∏–∏, –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏.',
    'role_mafia': '–ú–∞—Ñ–∏—è: –ß–ª–µ–Ω –º–∞—Ñ–∏–∏, —Ü–µ–ª—å - —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.',
    'role_commissar': '–ö–æ–º–∏—Å—Å–∞—Ä –ö–∞—Ç—Ç–∞–Ω–∏: –ú–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏.',
    'role_sergeant': '–°–µ—Ä–∂–∞–Ω—Ç: –ü–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–∏—Å—Å–∞—Ä—É –≤ –µ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.',
    'role_doctor': '–î–æ–∫—Ç–æ—Ä: –ú–æ–∂–µ—Ç –ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–ø–∞—Å–∞—Ç—å –∏—Ö –æ—Ç —É–±–∏–π—Å—Ç–≤–∞.',
    'role_maniac': '–ú–∞–Ω—å—è–∫: –£–±–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω.',
    'role_lover': '–õ—é–±–æ–≤–Ω–∏—Ü–∞: –°–ø–æ—Å–æ–±–Ω–∞ –Ω–æ—á–µ–≤–∞—Ç—å —É –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∏—Ö —É–±–∏–π—Å—Ç–≤–æ.',
    'role_lawyer': '–ê–¥–≤–æ–∫–∞—Ç: –ó–∞—â–∏—â–∞–µ—Ç –º–∞—Ñ–∏—é –≤ —Å—É–¥–µ.',
    'role_suicide': '–°–∞–º–æ—É–±–∏–π—Ü–∞: –ú–æ–∂–µ—Ç –ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π, —É–±–∏–≤–∞—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤.',
    'role_hobo': '–ë–æ–º–∂: –ù–µ –∏–º–µ–µ—Ç –¥–æ–º–∞ –∏ –º–æ–∂–µ—Ç –Ω–æ—á–µ–≤–∞—Ç—å —É —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.',
    'role_lucky': '–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫: –û–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —É–¥–∞—á–µ–π, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É –≤—ã–∂–∏–≤–∞—Ç—å.',
    'role_kamikaze': '–ö–∞–º–∏–∫–∞–¥–∑–µ: –ú–æ–∂–µ—Ç –≤–∑–æ—Ä–≤–∞—Ç—å—Å—è, —É–±–∏–≤–∞—è —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.'
}


@router.message(Command("create_game"), F.chat.type.in_(['group', 'supergroup']))
async def start_collecting_players(message: Message):
    global game_status, day_count
    if game_status != "stopped":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        return

    game_status = "collecting"
    players.clear()
    day_count = 1  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    await message.answer("–ò–≥—Ä–∞ '–ú–∞—Ñ–∏—è' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ.", reply_markup=kb.join_game_menu)

@router.message(Command("cancel"), F.chat.type.in_(['group', 'supergroup']))
async def cancel_game(message: Message):
    global game_status
    if game_status == "stopped":
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    game_status = "stopped"
    players.clear()
    await message.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await message.delete()

@router.message(Command("start_game"), F.chat.type.in_(['group', 'supergroup']))
async def start_game(message: Message):
    global game_status
    if not players:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    game_status = "running"
    await message.answer("–ò–≥—Ä–∞ '–ú–∞—Ñ–∏—è' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!",reply_markup=kb.create_starte_game_keyboard(bot_username))
    logging.info("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π.")
    await distribute_roles(message.chat.id, message.bot)


@router.callback_query(F.data == 'join_game')
async def join_game(callback: CallbackQuery, db: Session = next(get_db())):
    user = callback.from_user
    player = db.query(User).filter(User.tg_id == user.id).first()
    if not player:
        player = User(tg_id=user.id, name=user.full_name)
        db.add(player)
        db.commit()
    if user.id not in [player['id'] for player in players]:
        players.append({'id': user.id, 'name': user.full_name})
        await callback.answer('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!')
        try:
            await callback.message.bot.send_message(user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ '–ú–∞—Ñ–∏—è'!")
        except Exception:
            await callback.message.edit_text(
                f"{user.full_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ: ")
    else:
        await callback.answer('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')

    player_list = '\n'.join([player['name'] for player in players])
    current_text = callback.message.text or ""
    new_text = f"–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è –∫ –∏–≥—Ä–µ:\n{player_list}"
    if current_text != new_text:
        await callback.message.edit_text(new_text, reply_markup=kb.join_game_menu)
    logging.info(f"–ò–≥—Ä–æ–∫ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")

@router.callback_query(F.data.startswith('victim_'))
async def handle_victim_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_mafia':
            player['target'] = target_id
            break
    
    target_name = next(player['name'] for player in players if player['id'] == target_id)
    await callback.message.edit_text(f"üî™ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É: {target_name}.")
    await callback.answer("–¶–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞.")
    logging.info(f"–ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ –∂–µ—Ä—Ç–≤—É: {target_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {target_name}.")

@router.callback_query(F.data.startswith('heal_'))
async def handle_heal_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    heal_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_doctor':
            player['heal'] = heal_id
            break
    
    heal_name = next(player['name'] for player in players if player['id'] == heal_id)
    await callback.message.edit_text(f"ü©∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ª–µ—á–µ–Ω–∏—è: {heal_name}.")
    await callback.answer("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")
    logging.info(f"–î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è –ª–µ—á–µ–Ω–∏—è: {heal_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –≤—ã–±—Ä–∞–ª –¥–ª—è –ª–µ—á–µ–Ω–∏—è {heal_name}.")

@router.callback_query(F.data.startswith('check_'))
async def handle_check_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    check_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_commissar':
            player['check'] = check_id
            break
    
    check_name = next(player['name'] for player in players if player['id'] == check_id)
    await callback.message.edit_text(f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_name}.")
    await callback.answer("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    logging.info(f"–ö–æ–º–∏—Å—Å–∞—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –≤—ã–±—Ä–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_name}.")

@router.callback_query(F.data.startswith('vote_'))
async def handle_vote(callback: CallbackQuery):
    global votes_count
    voter_id = callback.from_user.id
    votee_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == voter_id:
            player['vote'] = votee_id
            break
    
    votes_count += 1
    votee_name = next(player['name'] for player in players if player['id'] == votee_id)
    await callback.message.edit_text(f"üîç –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {votee_name}.")
    await callback.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {votee_name}.")
    logging.info(f"–ò–≥—Ä–æ–∫ {callback.from_user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {votee_name}.")

    if votes_count == len(players):
        votes_event.set()

def get_roles(num_players):
    roles = {
        4: ['role_civilian', 'role_civilian', 'role_doctor', 'role_mafia'],    ####role_don
        3: ['role_civilian',  'role_doctor', 'role_mafia'],    
        5: ['role_civilian', 'role_civilian', 'role_civilian', 'role_doctor', 'role_don'],
        6: ['role_civilian', 'role_civilian', 'role_mafia', 'role_don', 'role_doctor', 'role_commissar'],
        7: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_commissar', 'role_mafia', 'role_don'],
        8: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_lover', 'role_commissar', 'role_mafia', 'role_don'],
        9: ['role_civilian', 'role_civilian', 'role_mafia', 'role_mafia', 'role_don', 'role_sergeant', 'role_lover', 'role_doctor', 'role_commissar'],
        10: ['role_civilian', 'role_sergeant', 'role_kamikaze', 'role_doctor', 'role_hobo', 'role_mafia', 'role_mafia', 'role_don', 'role_commissar', 'role_lover'],
        11: ['role_civilian', 'role_civilian', 'role_hobo', 'role_sergeant', 'role_commissar', 'role_doctor', 'role_lover', 'role_mafia', 'role_mafia', 'role_don', 'role_kamikaze'],
        12: ['role_civilian', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_lover', 'role_doctor', 'role_sergeant', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don'],
        13: ['role_civilian', 'role_civilian', 'role_commissar', 'role_sergeant', 'role_sergeant', 'role_hobo', 'role_kamikaze', 'role_doctor', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_lover'],
        14: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_lover', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_hobo', 'role_maniac', 'role_kamikaze', 'role_sergeant', 'role_commissar'],
        15: ['role_civilian', 'role_civilian', 'role_doctor', 'role_sergeant', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_lover', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac'],
        16: ['role_civilian', 'role_civilian', 'role_civilian', 'role_commissar', 'role_sergeant', 'role_sergeant', 'role_kamikaze', 'role_doctor', 'role_hobo', 'role_maniac', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_lover'],
        17: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_kamikaze', 'role_lover', 'role_sergeant', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac', 'role_doctor'],
        18: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_kamikaze', 'role_sergeant', 'role_commissar', 'role_sergeant', 'role_lover', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac', 'role_doctor', 'role_hobo'],
        19: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_doctor', 'role_sergeant', 'role_kamikaze', 'role_lover', 'role_maniac', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac'],
        20: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_sergeant', 'role_lover', 'role_commissar', 'role_sergeant', 'role_doctor', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac', 'role_hobo']
    }
    return roles.get(num_players, ['role_civilian'] * num_players)

async def distribute_roles(chat_id, bot: Bot):
    num_players = len(players)
    roles = get_roles(num_players)
    random.shuffle(roles)
    for player, role in zip(players, roles):
        player['role'] = role
        await bot.send_message(player['id'], f"–í–∞—à–∞ —Ä–æ–ª—å: {role_descriptions[role]}")

    await bot.send_message(chat_id, "–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É.")
    logging.info("–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")
    await night_phase(chat_id, bot)

async def night_phase(chat_id, bot):
    await bot.send_animation(chat_id, "CgACAgIAAxkBAAIC72aowkm0WBCMMiOvX7s-3SduoKH0AALeRgACPEsYSdPGShSs6JwHNQQ")
    logging.info("–ù–∞—á–∞–ª–∞—Å—å –Ω–æ—á—å {day_count}.")
    #         "üîç –ù–∞—á–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ."
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id,f"–ù–æ—á—å {day_count}\n–ù–∞ —É–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –ª–∏—à—å —Å–∞–º—ã–µ –æ—Ç–≤–∞–∂–Ω—ã–µ –∏ –±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ. –£—Ç—Ä–æ–º –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ö –≥–æ–ª–æ–≤—ã...", reply_markup=kb.create_starte_game_keyboard(bot_username))
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–∞—Ñ–∏–∏
    mafia_members = [player for player in players if player.get('role') == 'role_mafia']
    for member in mafia_members:
        victim_keyboard = kb.create_victim_keyboard(players)
        await bot.send_message(member['id'], "üî™ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É.", reply_markup=victim_keyboard)
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ö–æ–º–∏—Å—Å–∞—Ä–∞
    commissar = next((player for player in players if player.get('role') == 'role_commissar'), None)
    if commissar:
        check_keyboard = kb.create_victim_keyboard(players)
        await bot.send_message(commissar['id'], "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=check_keyboard)
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        await bot.send_message(chat_id, f"{commissar['name']}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: t.me/{bot_username}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –î–æ–∫—Ç–æ—Ä–∞
    doctor = next((player for player in players if player.get('role') == 'role_doctor'), None)
    if doctor:
        heal_keyboard = kb.create_victim_keyboard(players)
        await bot.send_message(doctor['id'], "ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è.", reply_markup=heal_keyboard)
        bot_info = await bot.get_me()
        bot_username = bot_info.username
    
        # await bot.send_message(chat_id, f"{doctor['name']}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–µ—á–µ–Ω–∏—è: t.me/{bot_username}")
    
    
    
    await bot.send_message(chat_id, "üïµÔ∏è‚Äç –ö–æ–º–∏—Å—Å–∞—Ä –ö–∞—Ç—Ç–∞–Ω–∏ —É–∂–µ –∑–∞—Ä—è–¥–∏–ª —Å–≤–æ–π –ø–∏—Å—Ç–æ–ª–µ—Ç...")
    await asyncio.sleep(10)
    await bot.send_message(chat_id, "üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –≤—ã—à–µ–ª –Ω–∞ –Ω–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ...")
    await asyncio.sleep(10)
    await bot.send_message(chat_id, "üî™ –ú–∞–Ω—å—è–∫ —Å–ø—Ä—è—Ç–∞–ª—Å—è –≥–ª—É–±–æ–∫–æ –≤ –∫—É—Å—Ç–∞—Ö...")
    await asyncio.sleep(10)



    await process_night_results(chat_id, bot)
    await day_phase(chat_id, bot)

async def process_night_results(chat_id, bot):
    print(players)
    print("*************")
    # –°–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∞ –º–∞—Ñ–∏—è
    mafia_target = [player['target'] for player in players if 'target' in player]

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –î–æ–∫—Ç–æ—Ä–∞
    doctor_target = next((player['heal'] for player in players if player.get('heal')), None)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ö–æ–º–∏—Å—Å–∞—Ä–∞
    commissar_check = next((player['check'] for player in players if player.get('check')), None)
    if commissar_check:
        check_result = "‚ùå –ú–∞—Ñ–∏—è" if next((player for player in players if player['id'] == commissar_check and player.get('role') in ['role_mafia', 'role_don']), None) else "‚úÖ –ù–µ –º–∞—Ñ–∏—è"
        commissar = next(player for player in players if player.get('role') == 'role_commissar')
        await bot.send_message(commissar['id'], f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_result}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    if doctor_target in mafia_target:
        await bot.send_message(chat_id, "üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–±—Ä–∞–ª–∞ –º–∞—Ñ–∏—è.")
        logging.info("–î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª –∏–≥—Ä–æ–∫–∞.")
    else:
        victim = next((player for player in players if player['id'] in mafia_target), None)
        if victim:
            await bot.send_message(chat_id, f"üíÄ –ò–≥—Ä–æ–∫ {victim['name']} –±—ã–ª —É–±–∏—Ç –º–∞—Ñ–∏–µ–π.")
            logging.info(f"–ò–≥—Ä–æ–∫ {victim['name']} –±—ã–ª —É–±–∏—Ç –º–∞—Ñ–∏–µ–π.")
            players.remove(victim)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for player in players:
        player.pop('target', None)
        player.pop('heal', None)
        player.pop('check', None)

async def day_phase(chat_id, bot):
    global votes_count, votes_event, day_count
    votes_count = 0
    votes_event = asyncio.Event()

    
    await bot.send_animation(chat_id, "CgACAgIAAxkBAAIC8WaowkuPlOmPE5LP2V6E8zaae-8uAAJ0UQACOschSaNjpf2o3gABIzUE")

    #         "üîç –ù–∞—á–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ."
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id, f"–î–µ–Ω—å {day_count}\n–°–æ–ª–Ω—Ü–µ –≤—Å—Ö–æ–¥–∏—Ç, –ø–æ–¥—Å—É—à–∏–≤–∞—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–∞—Ö –ø—Ä–æ–ª–∏—Ç—É—é –Ω–æ—á—å—é –∫—Ä–æ–≤—å...", reply_markup=kb.create_starte_game_keyboard(bot_username))
    logging.info(f"–ù–∞—á–∞–ª—Å—è –î–µ–Ω—å {day_count}.")
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    vote_keyboard = kb.create_vote_keyboard(players)
    for player in players:
        await bot.send_message(player['id'], "üîç –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ.", reply_markup=vote_keyboard)
    
    await asyncio.wait([asyncio.create_task(asyncio.sleep(20)), asyncio.create_task(votes_event.wait())])  # –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

    if votes_count < len(players):
        await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤.")
    await tally_votes(chat_id, bot)
    
    day_count += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–Ω—è

async def tally_votes(chat_id, bot):
    # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
    vote_counts = {player['id']: 0 for player in players}
    
    for player in players:
        if 'vote' in player:
            vote_counts[player['vote']] += 1

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    max_votes = max(vote_counts.values())
    voted_out = [player_id for player_id, votes in vote_counts.items() if votes == max_votes]
    
    if len(voted_out) > 1:
        await bot.send_message(chat_id, "–ù–∏—á—å—è! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É.")
        logging.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –≤–Ω–∏—á—å—é.")
        await day_phase(chat_id, bot)
    else:
        voted_out_player = next(player for player in players if player['id'] == voted_out[0])
        await bot.send_message(chat_id, f"üë§ –ò–≥—Ä–æ–∫ {voted_out_player['name']} –∏–∑–≥–Ω–∞–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")
        logging.info(f"–ò–≥—Ä–æ–∫ {voted_out_player['name']} –∏–∑–≥–Ω–∞–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")
        players.remove(voted_out_player)
        await check_game_status(chat_id, bot)

async def check_game_status(chat_id, bot):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
    civilians = [player for player in players if player.get('role') not in ['role_mafia', 'role_don']]
    mafia = [player for player in players if player.get('role') in ['role_mafia', 'role_don']]
    
    if not mafia:
        await bot.send_message(chat_id, "üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!")
        logging.info("–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏.")
        await end_game(chat_id, bot)
    elif len(mafia) >= len(civilians):
        await bot.send_message(chat_id, "üòà –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!")
        logging.info("–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞.")
        await end_game(chat_id, bot)
    else:
        await night_phase(chat_id, bot)

async def end_game(chat_id, bot):
    global game_status
    await bot.send_message(chat_id, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    logging.info("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    print("#######################3")

    print(players)
    print("#######################3")
    players.clear()
    game_status = "stopped"
