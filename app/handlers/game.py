import logging
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, BotCommand
from sqlalchemy.orm import Session
from app.database.db import get_db
from app.database.models import User
import app.keyboards as kb
from aiogram.filters import Command
import asyncio
import random
from aiogram.types import InputFile
import time
from aiogram.exceptions import TelegramBadRequest

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
start_time = None
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

router = Router()
players = []
game_status = "stopped" 
votes_count = 0
votes_event = asyncio.Event()
day_count = 1 

role_descriptions = {
    'role_civilian': '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å: –û–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞, –Ω–µ –æ–±–ª–∞–¥–∞—é—â–∏–π –æ—Å–æ–±—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏.',
    'role_don': '–î–æ–Ω: –ì–ª–∞–≤–∞ –º–∞—Ñ–∏–∏, –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏.',
    'role_mafia': '–ú–∞—Ñ–∏—è: –ß–ª–µ–Ω –º–∞—Ñ–∏–∏, —Ü–µ–ª—å - —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.',
    'role_commissar': '–ö–æ–º–∏—Å—Å–∞—Ä –ö–∞—Ç—Ç–∞–Ω–∏: –ú–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏ –∏–ª–∏ —É–±–∏–≤–∞—Ç—å.',
    'role_sergeant': '–°–µ—Ä–∂–∞–Ω—Ç: –ü–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–∏—Å—Å–∞—Ä—É –≤ –µ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.',
    'role_doctor': '–î–æ–∫—Ç–æ—Ä: –ú–æ–∂–µ—Ç –ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–ø–∞—Å–∞—Ç—å –∏—Ö –æ—Ç —É–±–∏–π—Å—Ç–≤–∞.',
    'role_maniac': '–ú–∞–Ω—å—è–∫: –£–±–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω.',
    'role_lover': '–õ—é–±–æ–≤–Ω–∏—Ü–∞: –°–ø–æ—Å–æ–±–Ω–∞ –Ω–æ—á–µ–≤–∞—Ç—å —É –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∏—Ö —É–±–∏–π—Å—Ç–≤–æ.',
    'role_lawyer': '–ê–¥–≤–æ–∫–∞—Ç: –ó–∞—â–∏—â–∞–µ—Ç –º–∞—Ñ–∏—é –≤ —Å—É–¥–µ.',
    'role_suicide': '–°–∞–º–æ—É–±–∏–π—Ü–∞: –ú–æ–∂–µ—Ç –ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π, —É–±–∏–≤–∞—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤.',
    'role_hobo': '–ë–æ–º–∂: –ù–µ –∏–º–µ–µ—Ç –¥–æ–º–∞ –∏ –º–æ–∂–µ—Ç –Ω–æ—á–µ–≤–∞—Ç—å —É —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.',
    'role_lucky': '–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫: –û–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —É–¥–∞—á–µ–π, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É –≤—ã–∂–∏–≤–∞—Ç—å.',
    'role_kamikaze': '–ö–∞–º–∏–∫–∞–¥–∑–µ: –ú–æ–∂–µ—Ç –≤–∑–æ—Ä–≤–∞—Ç—å—Å—è, —É–±–∏–≤–∞—è —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.'
}

def generate_player_list(players):
    roles_icons = {
        'role_civilian': 'üë®üèº –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å',
        'role_don': 'ü§µüèª –î–æ–Ω',
        'role_mafia': 'üëπ –ú–∞—Ñ–∏—è',
        'role_commissar': 'üëÆ‚Äç‚ôÇÔ∏è –ö–æ–º–∏—Å—Å–∞—Ä',
        'role_sergeant': 'üëÆ‚Äç‚ôÇÔ∏è –°–µ—Ä–∂–∞–Ω—Ç',
        'role_doctor': 'üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä',
        'role_maniac': 'üî™ –ú–∞–Ω—å—è–∫',
        'role_lover': '‚ù§Ô∏è –õ—é–±–æ–≤–Ω–∏—Ü–∞',
        'role_lawyer': 'üë®‚Äç‚öñÔ∏è –ê–¥–≤–æ–∫–∞—Ç',
        'role_suicide': 'üí£ –°–∞–º–æ—É–±–∏–π—Ü–∞',
        'role_hobo': 'üßôüèº‚Äç‚ôÇÔ∏è –ë–æ–º–∂',
        'role_lucky': 'üçÄ –°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫',
        'role_kamikaze': 'üí• –ö–∞–º–∏–∫–∞–¥–∑–µ'
    }

    player_links = []
    for i, player in enumerate(players, start=1):
        player_link = f'<a href="tg://user?id={player["id"]}">{i}. {player["name"]}</a>'
        player_links.append(player_link)

    roles_list = ", ".join(roles_icons[role['role']] for role in players)
    total_players = len(players)

    return f"<b>–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n" + "\n".join(player_links) + f"\n\n–ö—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö:\n{roles_list}\n–í—Å–µ–≥–æ: {total_players} —á–µ–ª.\n\n–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö..."

@router.message(Command("game"), F.chat.type.in_(['group', 'supergroup']))
async def start_collecting_players(message: Message):
    global game_status, day_count
    if game_status != "stopped":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        return

    game_status = "collecting"
    players.clear()
    day_count = 1  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–Ω–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    bot_info = await message.bot.get_me()
    join_button = kb.join_game_menu
    await message.answer("<b>–í–µ–¥–µ—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É!</b>", reply_markup=join_button, parse_mode="HTML")



@router.message(Command("cancel"), F.chat.type.in_(['group', 'supergroup']))
async def cancel_game(message: Message):
    global game_status
    if game_status == "stopped":
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    game_status = "stopped"
    players.clear()
    await message.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await message.delete()

@router.message(Command("start_game"), F.chat.type.in_(['group', 'supergroup']))
async def start_game(message: Message):
    global game_status, start_time
    if not players:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    game_status = "running"
    start_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    await message.answer("–ò–≥—Ä–∞ '–ú–∞—Ñ–∏—è' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", reply_markup=kb.create_starte_game_keyboard(bot_username))
    logging.info("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π.")
    await distribute_roles(message.chat.id, message.bot)



@router.message(Command("share"), F.chat.type.in_(['group', 'supergroup']))
async def share_group(message: Message):
    group_invite_link = "https://t.me/joinchat/XXXXXXXXXXXXXXX"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É
    share_keyboard = kb.create_social_share_keyboard(group_invite_link)
    await message.answer("–ü—Ä–∏–≥–ª–∞—Å–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥—Ä—É–∑–µ–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π:", reply_markup=share_keyboard)




@router.callback_query(F.data == 'join_game')
async def join_game(callback: CallbackQuery, db: Session = next(get_db())):
    user = callback.from_user
    player = db.query(User).filter(User.tg_id == user.id).first()
    if not player:
        player = User(tg_id=user.id, name=user.full_name)
        db.add(player)
        db.commit()
    if user.id not in [player['id'] for player in players]:
        players.append({'id': user.id, 'name': user.full_name})
        await callback.answer('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!')
        try:
            await callback.message.bot.send_message(user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ '–ú–∞—Ñ–∏—è'!")
        except Exception:
            await callback.message.edit_text(
                f"{user.full_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ: ")
    else:
        await callback.answer('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    player_list = ', '.join([f'<a href="tg://user?id={player["id"]}">{player["name"]}</a>' for player in players])
    current_text = callback.message.text or ""
    new_text = f"<b>–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É</b>\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n{player_list}\n\n–ò—Ç–æ–≥–æ <b>{len(players)}</b>."
    if current_text != new_text:
        await callback.message.edit_text(new_text, reply_markup=kb.join_game_menu, parse_mode='HTML')
    logging.info(f"–ò–≥—Ä–æ–∫ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")



@router.callback_query(F.data.startswith('victim_'))
async def handle_victim_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_mafia':
            player['target'] = target_id
            break
    
    target_name = next(player['name'] for player in players if player['id'] == target_id)
    await callback.message.edit_text(f"üî™ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É: {target_name}.")
    await callback.answer("–¶–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞.")
    logging.info(f"–ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ –∂–µ—Ä—Ç–≤—É: {target_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {target_name}.")

@router.callback_query(F.data.startswith('heal_'))
async def handle_heal_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    heal_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_doctor':
            player['heal'] = heal_id
            break
    
    heal_name = next(player['name'] for player in players if player['id'] == heal_id)
    await callback.message.edit_text(f"ü©∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ª–µ—á–µ–Ω–∏—è: {heal_name}.")
    await callback.answer("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")
    logging.info(f"–î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è –ª–µ—á–µ–Ω–∏—è: {heal_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –≤—ã–±—Ä–∞–ª –¥–ª—è –ª–µ—á–µ–Ω–∏—è {heal_name}.")



@router.callback_query(F.data.startswith('check_'))
async def handle_check_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    check_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_commissar':
            player['check'] = check_id
            break
    
    check_name = next(player['name'] for player in players if player['id'] == check_id)
    await callback.message.edit_text(f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_name}.")
    await callback.answer("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    logging.info(f"–ö–æ–º–∏—Å—Å–∞—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_name}.")
    await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –≤—ã–±—Ä–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_name}.")

@router.callback_query(F.data.startswith('kill_'))
async def handle_kill_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    kill_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == user_id and player.get('role') == 'role_commissar':
            player['kill'] = kill_id
            break
    
    kill_name = next(player['name'] for player in players if player['id'] == kill_id)
    await callback.message.edit_text(f"üî´ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞: {kill_name}.")
    await callback.answer("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞.")
    logging.info(f"–ö–æ–º–∏—Å—Å–∞—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞: {kill_name}.")
    # await callback.message.bot.send_message(callback.message.chat.id, f"{callback.from_user.full_name} –≤—ã–±—Ä–∞–ª –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞ {kill_name}.")
    
@router.callback_query(F.data.startswith('commissar_action_'))
async def handle_commissar_action(callback: CallbackQuery):
    action = callback.data.split('_')[2]
    user_id = callback.from_user.id

    if action == 'check':
        await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=kb.create_victim_keyboard(players, 'check'))
    elif action == 'kill':
        await callback.message.edit_text("üî´ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞.", reply_markup=kb.create_victim_keyboard(players, 'kill'))

    await callback.answer()



@router.callback_query(F.data.startswith('vote_'))
async def handle_vote(callback: CallbackQuery):
    global votes_count
    voter_id = callback.from_user.id
    votee_id = int(callback.data.split('_')[1])
    
    for player in players:
        if player['id'] == voter_id:
            player['vote'] = votee_id
            break
    
    votes_count += 1
    votee_name = next(player['name'] for player in players if player['id'] == votee_id)
    await callback.message.edit_text(f"üîç –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {votee_name}.")
    await callback.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {votee_name}.")
    logging.info(f"–ò–≥—Ä–æ–∫ {callback.from_user.full_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {votee_name}.")

    if votes_count == len(players):
        votes_event.set()

def get_roles(num_players):
    roles = {
        2: ['role_don' , 'role_mafia'],    ####role_don
        3: ['role_civilian',  'role_doctor', 'role_don'],    
        4: ['role_civilian', 'role_civilian', 'role_doctor', 'role_mafia'],    ####role_don
        5: ['role_civilian', 'role_civilian', 'role_civilian', 'role_doctor', 'role_don'],
        6: ['role_civilian', 'role_civilian', 'role_mafia', 'role_don', 'role_doctor', 'role_commissar'],
        7: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_commissar', 'role_mafia', 'role_don'],
        8: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_lover', 'role_commissar', 'role_mafia', 'role_don'],
        9: ['role_civilian', 'role_civilian', 'role_mafia', 'role_mafia', 'role_don', 'role_sergeant', 'role_lover', 'role_doctor', 'role_commissar'],
        10: ['role_civilian', 'role_sergeant', 'role_kamikaze', 'role_doctor', 'role_hobo', 'role_mafia', 'role_mafia', 'role_don', 'role_commissar', 'role_lover'],
        11: ['role_civilian', 'role_civilian', 'role_hobo', 'role_sergeant', 'role_commissar', 'role_doctor', 'role_lover', 'role_mafia', 'role_mafia', 'role_don', 'role_kamikaze'],
        12: ['role_civilian', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_lover', 'role_doctor', 'role_sergeant', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don'],
        13: ['role_civilian', 'role_civilian', 'role_commissar', 'role_sergeant', 'role_sergeant', 'role_hobo', 'role_kamikaze', 'role_doctor', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_lover'],
        14: ['role_civilian', 'role_civilian', 'role_sergeant', 'role_doctor', 'role_lover', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_hobo', 'role_maniac', 'role_kamikaze', 'role_sergeant', 'role_commissar'],
        15: ['role_civilian', 'role_civilian', 'role_doctor', 'role_sergeant', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_lover', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac'],
        16: ['role_civilian', 'role_civilian', 'role_civilian', 'role_commissar', 'role_sergeant', 'role_sergeant', 'role_kamikaze', 'role_doctor', 'role_hobo', 'role_maniac', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_lover'],
        17: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_kamikaze', 'role_lover', 'role_sergeant', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac', 'role_doctor'],
        18: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_kamikaze', 'role_sergeant', 'role_commissar', 'role_sergeant', 'role_lover', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac', 'role_doctor', 'role_hobo'],
        19: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_hobo', 'role_commissar', 'role_sergeant', 'role_doctor', 'role_sergeant', 'role_kamikaze', 'role_lover', 'role_maniac', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_maniac'],
        20: ['role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_civilian', 'role_sergeant', 'role_lover', 'role_commissar', 'role_sergeant', 'role_doctor', 'role_kamikaze', 'role_mafia', 'role_mafia', 'role_mafia', 'role_don', 'role_mani–∞–∫', 'role_hobo']
    }
    return roles.get(num_players, ['role_civilian'] * num_players)

async def distribute_roles(chat_id, bot: Bot):
    global players
    num_players = len(players)
    roles = get_roles(num_players)
    random.shuffle(roles)
    mafia_members = []
    don = None
    for player, role in zip(players, roles):
        player['role'] = role
        if role in ['role_mafia', 'role_don']:
            mafia_members.append(player)
            if role == 'role_don':
                don = player
        await bot.send_message(player['id'], f"–í–∞—à–∞ —Ä–æ–ª—å: {role_descriptions[role]}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –º–∞—Ñ–∏–∏ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    for mafia in mafia_members:
        allies = [f"<a href='tg://user?id={p['id']}'>{p['name']}</a> - {'–î–æ–Ω' if p['role'] == 'role_don' else '–ú–∞—Ñ–∏—è'}" for p in mafia_members if p['id'] != mafia['id']]
        allies_message = "–í–∞—à–∏ —Å–æ—é–∑–Ω–∏–∫–∏:\n" + "\n".join(allies)
        await bot.send_message(mafia['id'], allies_message, parse_mode='HTML')
    
    logging.info("–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")
    await night_phase(chat_id, bot)
    
    
    
async def handle_mafia_vote(bot: Bot, player: dict, keyboard, chat_id: int):
    msg = await bot.send_message(player['id'], "üî™ –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∂–µ—Ä—Ç–≤—É.", reply_markup=keyboard)
    
    try:
        future = asyncio.get_running_loop().create_future()

        async def process_callback(callback: CallbackQuery):
            if callback.from_user.id == player['id'] and callback.data.startswith('victim_'):
                await callback.answer()
                future.set_result(callback.data)

        router.callback_query.register(process_callback)
        choice = await asyncio.wait_for(future, timeout=30)
        router.callback_query.handlers.pop()

        player['target'] = int(choice.split('_')[1])
        await bot.send_message(player['id'], f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É.")
        
    except asyncio.TimeoutError:
        await bot.edit_message_text("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥.", chat_id=player['id'], message_id=msg.message_id)
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–∞—Ñ–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player['name']}: {e}")
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()






from aiogram import Bot, Router
from aiogram.types import CallbackQuery
import asyncio

async def handle_role_action(bot: Bot, player: dict, action_type: str, keyboard, chat_id: int, action_message: str):
    msg = await bot.send_message(player['id'], f"–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.", reply_markup=keyboard)
    
    try:
        # –°–æ–∑–¥–∞–µ–º future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è callback
        future = asyncio.get_running_loop().create_future()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query
        async def process_callback(callback: CallbackQuery):
            if callback.from_user.id == player['id'] and callback.data.startswith(action_type):
                await callback.answer()
                future.set_result(callback.data)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        router.callback_query.register(process_callback)

        # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        choice = await asyncio.wait_for(future, timeout=30)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        router.callback_query.handlers.pop()

        await bot.send_message(chat_id, action_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
        player[action_type] = choice.split('_')[1]
        
    except asyncio.TimeoutError:
        await bot.edit_message_text("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥.", chat_id=player['id'], message_id=msg.message_id)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è {action_type} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player['name']}: {e}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()

import asyncio
from aiogram import Bot

async def night_phase(chat_id: int, bot: Bot):
    global day_count, router
    await bot.send_animation(chat_id, "CgACAgIAAxkBAAIC72aowkm0WBCMMiOvX7s-3SduoKH0AALeRgACPEsYSdPGShSs6JwHNQQ")
    logging.info(f"–ù–∞—á–∞–ª–∞—Å—å –Ω–æ—á—å {day_count}.")
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id, f"–ù–æ—á—å {day_count}\n–ù–∞ —É–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –ª–∏—à—å —Å–∞–º—ã–µ –æ—Ç–≤–∞–∂–Ω—ã–µ –∏ –±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ. –£ –≤—Å–µ—Ö –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–≤–æ–∏ –Ω–æ—á–Ω—ã–µ –¥–µ–ª–∞...", reply_markup=kb.create_starte_game_keyboard(bot_username))
    
    await bot.send_message(chat_id, generate_player_list(players), parse_mode='HTML', reply_markup=kb.create_starte_game_keyboard(bot_username))
    
    night_actions = []
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–∞—Ñ–∏–∏ –∏ –î–æ–Ω–∞
    mafia_members = [player for player in players if player.get('role') in ['role_mafia', 'role_don']]
    # victim_keyboard = kb.create_victim_keyboard([p for p in players if p not in mafia_members], 'victim')
    # don_keyboard = kb.create_victim_keyboard([p for p in players if p not in mafia_members], 'don_victim')
    victim_keyboard = kb.create_victim_keyboard([p for p in players], 'victim')
    don_keyboard = kb.create_victim_keyboard([p for p in players], 'don_victim')
    
    for member in mafia_members:
        if member['role'] == 'role_don':
            night_actions.append(handle_don_vote(bot, member, don_keyboard, chat_id))
        else:
            night_actions.append(handle_mafia_vote(bot, member, victim_keyboard, chat_id))
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ö–æ–º–∏—Å—Å–∞—Ä–∞
    commissar = next((player for player in players if player.get('role') == 'role_commissar'), None)
    if commissar:
        commissar_keyboard = kb.create_commissar_action_keyboard()
        night_actions.append(handle_role_action(bot, commissar, 'commissar_action', commissar_keyboard, chat_id, "üïµÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–º–∏—Å—Å–∞—Ä –ö–∞—Ç—Ç–∞–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ–∏ –ø–æ–∏—Å–∫–∏..."))
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –î–æ–∫—Ç–æ—Ä–∞
    doctor = next((player for player in players if player.get('role') == 'role_doctor'), None)
    if doctor:
        heal_keyboard = kb.create_victim_keyboard(players, 'heal')
        night_actions.append(handle_role_action(bot, doctor, 'heal', heal_keyboard, chat_id, "üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª –Ω–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ..."))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
    try:
        await asyncio.wait_for(asyncio.gather(*night_actions), timeout=30)
    except asyncio.TimeoutError:
        logging.info("–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

    await bot.send_message(chat_id, "üåÖ –ù–æ—á—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏
    await process_night_results(chat_id, bot)
    await bot.send_message(chat_id, generate_player_list(players), parse_mode='HTML')

    await day_phase(chat_id, bot)

    
    
@router.callback_query(lambda c: c.data and c.data.startswith('don_victim_'))
async def handle_don_vote(callback: CallbackQuery):
    user_id = callback.from_user.id
    target_id = int(callback.data.split('_')[2])
    
    don = next((player for player in players if player['id'] == user_id and player.get('role') == 'role_don'), None)
    if don:
        don['target'] = target_id
        target_name = next(player['name'] for player in players if player['id'] == target_id)
        await callback.message.edit_text(f"üé© –í—ã, –∫–∞–∫ –î–æ–Ω, –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É: {target_name}.")
        await callback.answer("–¶–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞.")
        logging.info(f"–î–æ–Ω –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É: {target_name}.")
    else:
        await callback.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –î–æ–Ω–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def handle_mafia_vote(bot: Bot, player: dict, keyboard, chat_id: int):
    msg = await bot.send_message(player['id'], "üî™ –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∂–µ—Ä—Ç–≤—É.", reply_markup=keyboard)
    
    try:
        future = asyncio.get_running_loop().create_future()

        async def process_callback(callback: CallbackQuery):
            if callback.from_user.id == player['id'] and callback.data.startswith('victim_'):
                await callback.answer()
                future.set_result(callback.data)

        router.callback_query.register(process_callback)
        choice = await asyncio.wait_for(future, timeout=30)
        router.callback_query.handlers.pop()

        player['target'] = int(choice.split('_')[1])
        await bot.send_message(player['id'], f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É.")
        
    except asyncio.TimeoutError:
        await bot.edit_message_text("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥.", chat_id=player['id'], message_id=msg.message_id)
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–∞—Ñ–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player['name']}: {e}")
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()

async def handle_don_vote(bot: Bot, player: dict, keyboard, chat_id: int):
    msg = await bot.send_message(player['id'], "üé© –£ –≤–∞—Å, –∫–∞–∫ —É –î–æ–Ω–∞, –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∂–µ—Ä—Ç–≤—É.", reply_markup=keyboard)
    
    try:
        future = asyncio.get_running_loop().create_future()

        async def process_callback(callback: CallbackQuery):
            if callback.from_user.id == player['id'] and callback.data.startswith('don_victim_'):
                await callback.answer()
                future.set_result(callback.data)

        router.callback_query.register(process_callback)
        choice = await asyncio.wait_for(future, timeout=30)
        router.callback_query.handlers.pop()

        player['target'] = int(choice.split('_')[2])
        await bot.send_message(player['id'], f"–í—ã, –∫–∞–∫ –î–æ–Ω, –≤—ã–±—Ä–∞–ª–∏ –∂–µ—Ä—Ç–≤—É.")
        
    except asyncio.TimeoutError:
        await bot.edit_message_text("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥.", chat_id=player['id'], message_id=msg.message_id)
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –î–æ–Ω–∞: {e}")
        if process_callback in router.callback_query.handlers:
            router.callback_query.handlers.pop()
            






from collections import Counter
import logging
from collections import Counter
import random

async def process_night_results(chat_id, bot):
    global players
    logging.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ñ–∏–∏ –∏ –î–æ–Ω–∞
    don = next((player for player in players if player.get('role') == 'role_don'), None)
    mafia_members = [player for player in players if player.get('role') == 'role_mafia']
    
    mafia_votes = [player.get('target') for player in mafia_members if player.get('target')]
    don_target = don.get('target') if don else None

    logging.info(f"–ì–æ–ª–æ—Å–∞ –º–∞—Ñ–∏–∏: {mafia_votes}")
    logging.info(f"–í—ã–±–æ—Ä –î–æ–Ω–∞: {don_target}")

    victim = None
    if don_target:
        # –ï—Å–ª–∏ –î–æ–Ω —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –µ–≥–æ –≥–æ–ª–æ—Å –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        victim_id = don_target
        logging.info(f"–î–æ–Ω ({don['name']}) –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É: {victim_id}")
    elif mafia_votes:
        # –ï—Å–ª–∏ –î–æ–Ω –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –Ω–æ –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞ –æ–±—ã—á–Ω–æ–π –º–∞—Ñ–∏–∏
        vote_counts = Counter(mafia_votes)
        max_votes = max(vote_counts.values())
        potential_victims = [v for v, count in vote_counts.items() if count == max_votes]
        
        if len(potential_victims) == 1:
            victim_id = potential_victims[0]
        else:
            victim_id = random.choice(potential_victims)
        logging.info(f"–ñ–µ—Ä—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –º–∞—Ñ–∏–∏: {victim_id}")
    else:
        logging.info("–ú–∞—Ñ–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –≤—ã–±—Ä–∞—Ç—å –∂–µ—Ä—Ç–≤—É")

    if victim_id:
        victim = next((player for player in players if player['id'] == victim_id), None)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –î–æ–∫—Ç–æ—Ä–∞
    doctor = next((player for player in players if player.get('role') == 'role_doctor'), None)
    doctor_target = doctor.get('heal') if doctor else None
    logging.info(f"–¶–µ–ª—å –¥–æ–∫—Ç–æ—Ä–∞: {doctor_target}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ö–æ–º–∏—Å—Å–∞—Ä–∞
    commissar = next((player for player in players if player.get('role') == 'role_commissar'), None)
    commissar_check = commissar.get('check') if commissar else None
    commissar_kill = commissar.get('kill') if commissar else None
    
    if commissar_check:
        check_result = "‚ùå –ú–∞—Ñ–∏—è" if next((player for player in players if player['id'] == commissar_check and player.get('role') in ['role_mafia', 'role_don']), None) else "‚úÖ –ù–µ –º–∞—Ñ–∏—è"
        checked_player = next((player for player in players if player['id'] == commissar_check), None)
        if checked_player:
            await bot.send_message(commissar['id'], f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {checked_player['name']} - {check_result}")
            logging.info(f"–ö–æ–º–∏—Å—Å–∞—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –∏–≥—Ä–æ–∫–∞ {checked_player['name']}: {check_result}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    killed_players = []
    if victim and victim['id'] == doctor_target:
        await bot.send_message(chat_id, "üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–±—Ä–∞–ª–∞ –º–∞—Ñ–∏—è.")
        logging.info("–î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª —Ü–µ–ª—å –º–∞—Ñ–∏–∏")
    elif victim:
        killed_players.append(victim)
        logging.info(f"–ò–≥—Ä–æ–∫ {victim['name']} —É–±–∏—Ç –º–∞—Ñ–∏–µ–π")

    if commissar_kill:
        kill_victim = next((player for player in players if player['id'] == commissar_kill), None)
        if kill_victim and kill_victim not in killed_players:
            killed_players.append(kill_victim)
            logging.info(f"–ò–≥—Ä–æ–∫ {kill_victim['name']} —É–±–∏—Ç –∫–æ–º–∏—Å—Å–∞—Ä–æ–º")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É–±–∏–π—Å—Ç–≤–∞—Ö
    for killed in killed_players:
        death_reason = '–º–∞—Ñ–∏–µ–π' if killed == victim else '–∫–æ–º–∏—Å—Å–∞—Ä–æ–º'
        await bot.send_message(chat_id, f"üíÄ –ò–≥—Ä–æ–∫ {killed['name']} –±—ã–ª —É–±–∏—Ç {death_reason}.")
        await bot.send_message(chat_id, f"–°–µ–≥–æ–¥–Ω—è –±—ã–ª –∂–µ—Å—Ç–æ–∫–æ —É–±–∏—Ç {killed['name']}.\n–ì–æ–≤–æ—Ä—è—Ç, —É –Ω–µ–≥–æ –≤ –≥–æ—Å—Ç—è—Ö –±—ã–ª {death_reason}.")

    # –£–¥–∞–ª–µ–Ω–∏–µ —É–±–∏—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
    players = [player for player in players if player not in killed_players]

    if not killed_players:
        await bot.send_message(chat_id, "–≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±.")
        logging.info("–ù–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for player in players:
        for key in ['target', 'heal', 'check', 'kill']:
            player.pop(key, None)

    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã")
    
    
    
    

async def handle_night_action(bot: Bot, chat_id: int, message_id: int, timeout: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    :param timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(timeout)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            text="–í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥.",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except TelegramBadRequest as e:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä)
        # –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        print("–ó–∞–¥–∞—á–∞ handle_night_action –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ handle_night_action: {e}")


async def day_phase(chat_id, bot):
    global votes_count, day_count
    votes_count = 0
    
    await bot.send_animation(chat_id, "CgACAgIAAxkBAAIC8WaowkuPlOmPE5LP2V6E8zaae-8uAAJ0UQACOschSaNjpf2o3gABIzUE")

    bot_info = await bot.get_me()
    bot_username = bot_info.username
    await bot.send_message(chat_id, f"–î–µ–Ω—å {day_count}\n–°–æ–ª–Ω—Ü–µ –≤—Å—Ö–æ–¥–∏—Ç, –ø–æ–¥—Å—É—à–∏–≤–∞—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–∞—Ö –ø—Ä–æ–ª–∏—Ç—É—é –Ω–æ—á—å—é –∫—Ä–æ–≤—å...", reply_markup=kb.create_starte_game_keyboard(bot_username))
    logging.info(f"–ù–∞—á–∞–ª—Å—è –î–µ–Ω—å {day_count}.")
    
    await bot.send_message(chat_id, generate_player_list(players), parse_mode='HTML')

    await bot.send_message(chat_id, "<b>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ –Ω–∞–∫–∞–∑–∞—Ç—å –≤–∏–Ω–æ–≤–Ω—ã—Ö.\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è —Ä–æ–≤–Ω–æ 30 —Å–µ–∫—É–Ω–¥</b>", reply_markup=kb.create_starte_game_keyboard(bot_username), parse_mode='HTML')
    
    vote_keyboard = kb.create_vote_keyboard(players)
    voting_tasks = []
    for player in players:
        try:
            msg = await bot.send_message(player['id'], "üîç –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ.", reply_markup=vote_keyboard)
            voting_tasks.append(asyncio.create_task(handle_night_action(bot, player['id'], msg.message_id, 30)))
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player['name']}: {e}")
            continue
    await asyncio.gather(*voting_tasks)

    await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤.")
    await tally_votes(chat_id, bot)
    
    day_count += 1
    await check_game_status(chat_id, bot)

async def tally_votes(chat_id, bot):
    # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
    vote_counts = {player['id']: 0 for player in players}
    
    for player in players:
        if 'vote' in player:
            vote_counts[player['vote']] += 1

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    max_votes = max(vote_counts.values())
    voted_out = [player_id for player_id, votes in vote_counts.items() if votes == max_votes]
    
    if len(voted_out) > 1 or max_votes == 0:
        # –ù–∏—á—å—è –∏–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        await bot.send_message(chat_id, "–ì–æ—Ä–æ–¥ –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ. –ù–∏–∫—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∏–∑–≥–Ω–∞–Ω —Å–µ–≥–æ–¥–Ω—è.")
        logging.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
    else:
        voted_out_player = next(player for player in players if player['id'] == voted_out[0])
        await bot.send_message(chat_id, f"üë§ –ò–≥—Ä–æ–∫ {voted_out_player['name']} –∏–∑–≥–Ω–∞–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")
        logging.info(f"–ò–≥—Ä–æ–∫ {voted_out_player['name']} –∏–∑–≥–Ω–∞–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")
        players.remove(voted_out_player)

    # –û—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
    for player in players:
        player.pop('vote', None)

async def check_game_status(chat_id, bot):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
    civilians = [player for player in players if player.get('role') not in ['role_mafia', 'role_don']]
    mafia = [player for player in players if player.get('role') in ['role_mafia', 'role_don']]
    
    if not mafia:
        await bot.send_message(chat_id, "üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!")
        logging.info("–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏.")
        await end_game(chat_id, bot)
    elif len(mafia) >= len(civilians):
        await bot.send_message(chat_id, "üòà –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!")
        logging.info("–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞.")
        await end_game(chat_id, bot)
    else:
        await night_phase(chat_id, bot)

async def end_game(chat_id, bot):
    global game_status, start_time, players
    end_time = time.time()
    duration = end_time - start_time
    duration_str = time.strftime("%M –º–∏–Ω. %S —Å–µ–∫.", time.gmtime(duration))

    mafia_team = [player for player in players if player.get('role') in ['role_mafia', 'role_don']]
    civilian_team = [player for player in players if player.get('role') not in ['role_mafia', 'role_don']]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã
    if len(mafia_team) >= len(civilian_team):
        winning_team = "–ú–∞—Ñ–∏—è"
        winners = mafia_team
        losers = civilian_team
    else:
        winning_team = "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"
        winners = civilian_team
        losers = mafia_team

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–≥—Ä–æ–∫–∞
    def format_player(player):
        role_icon = {
            'role_civilian': 'üë®üèº –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å',
            'role_don': 'ü§µüèª –î–æ–Ω',
            'role_mafia': 'ü§µüèº –ú–∞—Ñ–∏—è',
            'role_commissar': 'üïµÔ∏è‚Äç –ö–æ–º–∏—Å—Å–∞—Ä –ö–∞—Ç—Ç–∞–Ω–∏',
            'role_doctor': 'üë®üèº‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä',
            'role_hobo': 'üßôüèº‚Äç‚ôÇÔ∏è –ë–æ–º–∂',
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }.get(player.get('role'), '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
        return f"    <a href='tg://user?id={player['id']}'>{player['name']}</a> - {role_icon}"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    winners_list = '\n'.join([format_player(player) for player in winners])
    losers_list = '\n'.join([format_player(player) for player in losers])

    message = (
        f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
        f"–ü–æ–±–µ–¥–∏–ª–∞ {winning_team}\n\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_list}\n\n"
        f"–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n{losers_list}\n\n"
        f"–ò–≥—Ä–∞ –¥–ª–∏–ª–∞—Å—å: {duration_str}"
    )

    await bot.send_message(chat_id, message, parse_mode='HTML')
    logging.info(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–æ–±–µ–¥–∏–ª–∞ {winning_team}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    players.clear()
    game_status = "stopped"